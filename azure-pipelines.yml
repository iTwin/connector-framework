trigger:
  branches:
    include:
      - main
      - releases/*
  paths:
    exclude:
      - README.md
      - LICENSE
      - .vscode/*

pr:
  drafts: false
  branches:
    include:
      - main
      - release/*
  paths:
    exclude:
      - README.md
      - LICENSE

resources:
  repositories:
    - repository: build-pipeline-scripts
      type: git
      ref: master
      name: iModelTechnologies/imodeljs-build-pipeline-scripts

stages:
- stage: Build
  displayName: Build
  jobs:
    - job: Build
      strategy:
        matrix:
          linux:
            imageName: 'ubuntu-latest'
          # mac:
            # imageName: 'macos-latest'
          windows:
            imageName: 'windows-latest'

      pool:
        vmImage: '$(imageName)'

      steps:

      - checkout: self
        persistCredentials: true
        clean: true

      - task: NodeTool@0
        inputs:
          versionSpec: '14.18.1'
        displayName: 'Install Node.js'

      - script: |
          npm install npm@8.1.0 -f
        displayName: 'install latest npm'

      - script: |
          npm ci
        displayName: 'npm ci'

      - script: |
           npm run build
        displayName: 'npm run build'

      - script: |
          npm run test:standalone
        displayName: 'npm run test:standalone'
        condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

      - script: |
          npm run test:integration
        displayName: 'npm run test:integration'
        env:
          imjs_buddi_resolve_url_using_region: $(env)
          test_project_id: $(test_project_id)
          test_user_name: $(test_user_name)
          test_user_password: $(test_user_password)
          test_client_id: $(test_client_id)
          test_redirect_uri: $(test_redirect_uri)
          test_scopes: $(test_scopes)
        condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

      - bash: |
          checkVersion() {
            localVer=$1
            name=$2

            remoteVer=$(npm view $name version)
            if [ -z "$remoteVer" ]; then
              remoteVer=0.0.0
            fi

            olderVer=$(printf '%s\n' "$localVer" "$remoteVer" | sort -V | head -n1)
            if [ "$localVer" != "$remoteVer" ] && [ "$remoteVer" = "$olderVer" ]; then
              echo true
            else
              echo false
            fi
          }

          version=$(node -p "require('./package.json').version")
          name=$(node -p "require('./package.json').name")
          update=$(checkVersion $version $name)

          if [ "$update" = "true" ] ; then
            echo "package publishing conditions are met."
            shouldPublish=true
          else
            echo "package publishing conditions not met."
            shouldPublish=false
          fi

          echo "##vso[task.setvariable variable=shouldPublish;isOutput=true]$shouldPublish"
          echo "##vso[task.setvariable variable=version;isOutput=true]$version"
          echo "##vso[task.setvariable variable=name;isOutput=true]$name"

        displayName: 'Store Build Info'
        name: info
        condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

      - bash: |
          echo "shouldPublish: $(info.shouldPublish)"
          pwd
          ls
        displayName: 'Show Build Info'
        condition: and(succeeded(), eq(variables['info.shouldPublish'], 'true'))

      - script: |
          npm pack
        displayName: 'npm pack @itwin/connector-framework'
        workingDirectory: connector-framework
        condition: and(succeeded(), eq(variables['info.shouldPublish'], 'true'))

      - task: CopyFiles@2
        inputs:
          sourceFolder: connector-framework
          contents: '*.tgz'
          targetFolder: $(Build.ArtifactStagingDirectory)/connector-framework
        displayName: 'Copy @itwin/connector-framework'
        condition: and(succeeded(), eq(variables['info.shouldPublish'], 'true'))

      # - script: |
      #     path=$(Build.ArtifactStagingDirectory)/connector-framework
      #     npm publish $path --tag beta --access public
      #   displayName: Publish npm package
      #   condition: and(succeeded(), eq(variables['info.shouldPublish'], 'true'))

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/connector-framework'
          artifactName: connector-framework
        displayName: 'Publish Connector Framework Artifact'
        condition: and(succeeded(), eq(variables['info.shouldPublish'], 'true'))

- stage: Publish
  displayName: Publish
  condition: and(succeeded(), eq(dependencies.Build.outputs['Build.info.shouldPublish'], 'true'))
  dependsOn: Build
  jobs:
    - template: templates/npmjs-publish-deployment.yaml@build-pipeline-scripts
      parameters:
        path: '*.tgz'
        artifactName: connector-framework
        releaseTag: 'beta'
        dryrun: true

